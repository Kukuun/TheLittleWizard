using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace TheLittleWizard
{
    class GridManager
    {
        //Handeling of graphics

        //private GraphicsDeviceManager dc;
        private Rectangle displayRectangle;

        /// <summary>
        /// Amount of rows in the grid
        /// </summary>
        private int cellRowCount;

        /// <summary>
        /// This list contains all cells
        /// </summary>
        private List<Cell> grid;

        /// <summary>
        /// The current click type
        /// </summary>
        private CellType clickType;
        static Texture2D whitePixel;

        private static GridManager instance;

        public static GridManager Instance
        {
            get
            {
                if (instance == null)
                {
                    throw new Exception("Grid Manager not instaced!");
                }
                return instance;
            }
        }

        public static void Create(GraphicsDeviceManager device, Rectangle rectangle)
        {
            if (instance == null)
            {
                instance = new GridManager(device, rectangle);
            }
        }

        private GridManager(GraphicsDeviceManager dc, Rectangle displayRectangle)
        {
            ////Create's (Allocates) a buffer in memory with the size of the display
            //this.backBuffer = BufferedGraphicsManager.Current.Allocate(dc, displayRectangle);

            ////Sets the graphics context to the graphics in the buffer
            //this.dc = backBuffer.Graphics;

            //Sets the displayRectangle
            this.displayRectangle = displayRectangle;

            //Sets the row count to then, this will create a 10 by 10 grid.
            cellRowCount = 15;

            CreateGrid();
            GenerateWorld();
        }

        /// <summary>
        /// Renders all the cells
        /// </summary>
        //public void Render()
        //{
        //    dc.Clear(Color.White);            

        //    foreach (Cell cell in grid)
        //    {
        //        cell.Render(dc);
        //    }

        //    //Renders the content of the buffered graphics context to the real context(Swap buffers)
        //    backBuffer.Render();
        //}

        /// <summary>
        /// Creates the grid
        /// </summary>
        public void CreateGrid()
        {
            //Instantiates the list of cells
            grid = new List<Cell>();

            //Sets the cell size
            int cellSize = 32;

            //Creates all the cells
            for (int x = 0; x < cellRowCount; x++)
            {
                for (int y = 0; y < cellRowCount; y++)
                {
                    grid.Add(new Cell(new Point(x, y), cellSize, x, y));
                }
            }
            Cell wizardCell = grid.Find(x => x.gridX == 2 && x.gridY == 14);
            Cell portalCell = grid.Find(x => x.gridX == 0 && x.gridY == 14);
            Game1.ObjectToAdd.Add(new Wizard(new Point(wizardCell.Position.X * cellSize + cellSize / 2, wizardCell.Position.Y * cellSize + cellSize / 2)));
            Game1.ObjectToAdd.Add(new Portal(new Point(portalCell.Position.X * cellSize + cellSize / 2, portalCell.Position.Y * cellSize + cellSize / 2)));
        }

        public List<Cell> GetNeighbors(Cell cell)
        {
            List<Cell> neighbors = new List<Cell>();

            for (int x = -1; x < 2; x++)
            {
                for (int y = -1; y < 2; y++)
                {
                    if (x == 0 && y == 0)
                    {
                        continue;
                    }

                    int checkX = cell.gridX + x;
                    int checkY = cell.gridY + y;

                    foreach (Cell item in grid)
                    {
                        if (item.gridX == checkX && item.gridY == checkY)
                        {
                            //neighbors.Add(item);

                            if (Math.Abs(item.gridX - cell.gridX) + Math.Abs(item.gridY - cell.gridY) == 2)
                            {
                                if (CheckCorner(cell, item))
                                {
                                    neighbors.Add(item);
                                }
                            }
                            else
                            {
                                neighbors.Add(item);
                            }
                        }
                    }
                }
            }
            return neighbors;
        }

        /// <summary>
        /// If the mouse clicks on a cell
        /// </summary>
        /// <param name="mousePos"></param>
        //public void ClickCell(Point mousePos)
        //{
        //    foreach (Cell cell in grid) //Finds the cell that we just clicked
        //    {
        //        if (cell.BoundingRectangle.IntersectsWith(new Rectangle(mousePos, new Size(1, 1))))
        //        {
        //            cell.Click(ref clickType);
        //        }
        //    }
        //}

        public List<Cell> path;

        public void CheckPath()
        {
            foreach (Cell item in grid)
            {
                item.gCost = 0;
                item.hCost = 0;
                item.pathPart = PathParticipation.NOT;
                item.parent = null;
            }

            Pathfinding path = new Pathfinding();

            Cell start = grid.Find(Cell => Cell.myType == CellType.START);
            Cell end = grid.Find(Cell => Cell.myType == CellType.GOAL);
            path.AStar(start, end, this);
        }

        private bool CheckCorner(Cell startCell, Cell corner)
        {
            int x = startCell.gridX - corner.gridX;
            int y = startCell.gridY - corner.gridY;

            if (x == -1 && y == -1)
            {
                Cell cell1 = grid.Find(Cell => Cell.gridX == corner.gridX && Cell.gridY == corner.gridY - 1);
                Cell cell2 = grid.Find(Cell => Cell.gridX == corner.gridX - 1 && Cell.gridY == corner.gridY);
                if (!cell1.walkable && cell2.walkable)
                {
                    return false;
                }
            }
            else if (x == -1 && y == 1)
            {
                Cell cell1 = grid.Find(Cell => Cell.gridX == corner.gridX && Cell.gridY == corner.gridY + 1);
                Cell cell2 = grid.Find(Cell => Cell.gridX == corner.gridX - 1 && Cell.gridY == corner.gridY);
                if (!cell1.walkable && cell2.walkable)
                {
                    return false;
                }
            }
            else if (x == 1 && y == -1)
            {
                Cell cell1 = grid.Find(Cell => Cell.gridX == corner.gridX && Cell.gridY == corner.gridY - 1);
                Cell cell2 = grid.Find(Cell => Cell.gridX == corner.gridX + 1 && Cell.gridY == corner.gridY);
                if (!cell1.walkable && cell2.walkable)
                {
                    return false;
                }
            }
            else if (x == 1 && y == 1)
            {
                Cell cell1 = grid.Find(Cell => Cell.gridX == corner.gridX && Cell.gridY == corner.gridY + 1);
                Cell cell2 = grid.Find(Cell => Cell.gridX == corner.gridX + 1 && Cell.gridY == corner.gridY);
                if (!cell1.walkable && cell2.walkable)
                {
                    return false;
                }
            }
            return true;
        }

        public void DrawRectangle(SpriteBatch spriteBatch, Rectangle rectangle, Color color, int lineWidth)
        {
            if (whitePixel == null)
            {
                whitePixel = new Texture2D(spriteBatch.GraphicsDevice, 1, 1);
                whitePixel.SetData<Color>(new Color[] { Color.White });
            }

            spriteBatch.Draw(whitePixel, new Rectangle(rectangle.X, rectangle.Y, lineWidth, rectangle.Height + lineWidth), color);
            spriteBatch.Draw(whitePixel, new Rectangle(rectangle.X, rectangle.Y, rectangle.Width + lineWidth, lineWidth), color);
            spriteBatch.Draw(whitePixel, new Rectangle(rectangle.X + rectangle.Width, rectangle.Y, lineWidth, rectangle.Height + lineWidth), color);
            spriteBatch.Draw(whitePixel, new Rectangle(rectangle.X, rectangle.Y + rectangle.Height, rectangle.Width + lineWidth, lineWidth), color);
        }

        public virtual void Draw(SpriteBatch spriteBatch)
        {
            foreach (Cell item in grid)
            {
                spriteBatch.Draw(item.cellTexture, new Vector2(item.gridX * item.CellSize, item.gridY * item.CellSize), Color.White);
                DrawRectangle(spriteBatch, item.BoundingRectangle, Color.White, 1);
            }
        }

        private void GenerateWorld()
        {
            #region Path Rows
            int row1 = 0;
            int row2 = 0;
            int row3 = 0;
            int row4 = 0;
            int row5 = 0;
            int row6 = 0;
            int row7 = 0;
            int row8 = 0;
            int row9 = 0;
            #endregion

            #region Tower Row
            int tower1 = 0;
            int tower2 = 0;
            #endregion 

            #region Tree Rows
            int treeRow1 = 0;
            int treeRow2 = 0;
<<<<<<< HEAD
=======
            #endregion

            #region Water Rows
            int waterRow1 = 0;
            int waterRow2 = 0;
            int waterRow3 = 0;
            int waterRow4 = 0;
            int waterRow5 = 0;
            int waterRow6 = 0;
            int waterRow7 = 0;
            int waterRow8 = 0;
>>>>>>> 8c35e0429ef4a21d3da0745339b3d99d97de1f58
            #endregion

            foreach (Cell item in grid)
            {

                #region Path Rows
                //row1
                if (item == grid.Find(x => x.gridX == 0 + row1 && x.gridY == 14 && row1 < 4))
                {
                    item.cellTexture = PreLoad.Ground;
                    row1++;
                }
                //row2
                if (item == grid.Find(x => x.gridX == 3 && x.gridY == 8 + row2 && row2 < 6))
                {
                    item.cellTexture = PreLoad.Ground;
                    row2++;
                }
                //row3
                if (item == grid.Find(x => x.gridX == 3 + row3 && x.gridY == 8 && row3 < 2))
                {
                    item.cellTexture = PreLoad.Ground;
                    row3++;
                }
                //row4
                if (item == grid.Find(x => x.gridX == 4 && x.gridY == 3 + row4 && row4 < 6))
                {
                    item.cellTexture = PreLoad.Ground;
                    row4++;
                }
                //row5
                if (item == grid.Find(x => x.gridX == 5 + row5 && x.gridY == 3 && row5 < 7))
                {
                    item.cellTexture = PreLoad.Ground;
                    row5++;
                }
                //row6
                if (item == grid.Find(x => x.gridX == 11 && x.gridY == 3 + row6 && row6 < 9))
                {
                    item.cellTexture = PreLoad.Ground;
                    row6++;
                }
                //row7
                if (item == grid.Find(x => x.gridX == 11 + row7 && x.gridY == 11 && row7 < 1))
                {
                    item.cellTexture = PreLoad.Ground;
                    row7++;
                }
                //row8
                if (item == grid.Find(x => x.gridX == 12 && x.gridY == 11 + row8 && row8 < 3))
                {
                    item.cellTexture = PreLoad.Ground;
                    row8++;
                }
                //row9
                if (item == grid.Find(x => x.gridX == 4 + row9 && x.gridY == 13 && row9 < 9))
                {
                    item.cellTexture = PreLoad.Ground;
                    row9++;
                }
                #endregion

                #region Tree Rows
                //treerow1
                if (item == grid.Find(x => x.gridX == 4 + treeRow1 && x.gridY == 14 && treeRow1 < 8))
                {
                    Game1.ObjectToAdd.Add(new Tree((new Point(item.Position.X * item.CellSize + item.CellSize / 2, item.Position.Y * item.CellSize + item.CellSize / 4))));
                    treeRow1++;
                    item.myType = CellType.WALL;
                }
<<<<<<< HEAD

=======
>>>>>>> 8c35e0429ef4a21d3da0745339b3d99d97de1f58
                //treerow2
                if (item == grid.Find(x => x.gridX == 4 + treeRow2 && x.gridY == 12 && treeRow2 < 8))
                {
                    Game1.ObjectToAdd.Add(new Tree((new Point(item.Position.X * item.CellSize + item.CellSize / 2, item.Position.Y * item.CellSize + item.CellSize / 4))));
                    treeRow2++;
                    item.myType = CellType.WALL;
                }
                #endregion

                #region Towers
                // Regular tower
                if (item == grid.Find(x => x.gridX == 2 + tower1 && x.gridY == 7 && tower1 < 1))
                {
                    Game1.ObjectToAdd.Add(new Tower((new Point(item.Position.X * item.CellSize + item.CellSize / 2, item.Position.Y * item.CellSize + item.CellSize / 2)), true));
                    tower1++;
                    item.myType = CellType.GOAL;
                }

                // Ice tower
                if (item == grid.Find(x => x.gridX == 13 + tower2 && x.gridY == 13 && tower2 < 1))
                {
                    Game1.ObjectToAdd.Add(new Tower((new Point(item.Position.X * item.CellSize + item.CellSize / 2, item.Position.Y * item.CellSize + item.CellSize / 2)), false));
                    tower2++;
                    item.myType = CellType.GOAL;
                }
                #endregion

                #region water
                if (item == grid.Find(x => x.gridX == 4 + waterRow1 && x.gridY == 11 && waterRow1 < 7))
                {
                    item.cellTexture = PreLoad.River;
                    waterRow1++;
                    item.myType = CellType.WALL;
                }

                if (item == grid.Find(x => x.gridX == 4 + waterRow2 && x.gridY == 10 && waterRow2 < 7))
                {
                    item.cellTexture = PreLoad.River;
                    waterRow2++;
                    item.myType = CellType.WALL;
                }

                if (item == grid.Find(x => x.gridX == 4 + waterRow3 && x.gridY == 9 && waterRow3 < 7))
                {
                    item.cellTexture = PreLoad.River;
                    waterRow3++;
                    item.myType = CellType.WALL;
                }

                if (item == grid.Find(x => x.gridX == 5 + waterRow4 && x.gridY == 8 && waterRow4 < 6))
                {
                    item.cellTexture = PreLoad.River;
                    waterRow4++;
                    item.myType = CellType.WALL;
                }
                if (item == grid.Find(x => x.gridX == 5 + waterRow4 && x.gridY == 7 && waterRow5 < 6))
                {
                    item.cellTexture = PreLoad.River;
                    waterRow5++;
                    item.myType = CellType.WALL;
                }
                if (item == grid.Find(x => x.gridX == 5 + waterRow6 && x.gridY == 6 && waterRow6 < 6))
                {
                    item.cellTexture = PreLoad.River;
                    waterRow6++;
                    item.myType = CellType.WALL;
                }
                if (item == grid.Find(x => x.gridX == 5 + waterRow7 && x.gridY == 5 && waterRow7 < 6))
                {
                    item.cellTexture = PreLoad.River;
                    waterRow7++;
                    item.myType = CellType.WALL;
                }
                if (item == grid.Find(x => x.gridX == 5 + waterRow8 && x.gridY == 4 && waterRow8 < 6))
                {
                    item.cellTexture = PreLoad.River;
                    waterRow8++;
                    item.myType = CellType.WALL;
                }


                #endregion


            }

        }


    }
}